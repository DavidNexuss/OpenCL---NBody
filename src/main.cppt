#include <iostream>
#include <stdio.h>
#include <stdlib.h>     /* srand, rand */
#include <time.h>       /* time */
#include <CL/cl.h>

#define MAX_SOURCE_SIZE 0x10000
#define GRAVITY_CONSTANT 1e-2
#define LSIZE 1000
struct Object{

    cl_float x;
    cl_float y;
    cl_float vx;
    cl_float vy;
    cl_float ax;
    cl_float ay;
    cl_float mass;

}__attribute__((packed));

using namespace std;

Object* object_list;
Object* result_list;

cl_context context;
cl_command_queue command_queue;
cl_kernel kernel;
cl_mem object_list_mem_obj;

void writeObjectBuffer();
void readObjectBuffer();

inline int getRandom(){

	return rand() % 100;
}

inline void initCL(){
	
	FILE *fp;
	fp = fopen("src/main.cl","r");
	if(!fp){
		fprintf(stderr,"Failed to load kernel\n");
		exit(1);
	}
	char* source_str = new char[MAX_SOURCE_SIZE];
	size_t source_size = fread(source_str,1,MAX_SOURCE_SIZE,fp);
	fclose(fp);
	
	//cout << "Kernel Source:	 " << endl;
	//cout << source_str << endl;
	

	cl_platform_id platform_id = NULL;
	cl_device_id device_id = NULL;
	cl_uint ret_num_devices;
	cl_uint ret_num_platforms;
	
	cl_int ret = clGetPlatformIDs(1, &platform_id,&ret_num_platforms);
	ret = clGetDeviceIDs(platform_id,CL_DEVICE_TYPE_DEFAULT,1,&device_id,&ret_num_devices);

	//Create OpenCL context
	context = clCreateContext(NULL,1,&device_id,NULL,NULL,&ret);

	//Create command queue
	command_queue = clCreateCommandQueue(context,device_id,0, &ret);

	object_list_mem_obj = clCreateBuffer(context, CL_MEM_READ_WRITE, 
            LSIZE * sizeof(Object), NULL, &ret);
	//Create program	

	cl_program program = clCreateProgramWithSource(context,1,(const char**)&source_str,(const size_t*)&source_size,&ret);
	ret = clBuildProgram(program,1,&device_id,NULL,NULL,NULL);
	if(ret){
		cout << "Build error " << ret << endl;
		exit(1);
	}
	// Create the OpenCL kernel

	kernel = clCreateKernel(program, "simulate",&ret);
	
	delete [] source_str;
	

}

void writeObjectBuffer(){
	cl_int ret = 0;
	ret = clEnqueueWriteBuffer(command_queue,object_list_mem_obj,CL_TRUE,0,LSIZE * sizeof(Object),result_list,0,NULL,NULL);
}

void readObjectBuffer(){
	cl_int ret = 0;
	ret = clEnqueueReadBuffer(command_queue, object_list_mem_obj, CL_TRUE,0,LSIZE * sizeof(Object),result_list,0,NULL,NULL);

}
void step(){

	
	const int size = LSIZE;
	const float delta = 1/60.0;
	cl_int ret = 0;

	//writeObjectBuffer();
	//set arguments
	ret = clSetKernelArg(kernel,0,sizeof(cl_mem),(void*)&object_list_mem_obj);
	ret = clSetKernelArg(kernel,1,sizeof(int),&size);
	ret = clSetKernelArg(kernel,2,sizeof(float),&delta);

	size_t global_item_size = LSIZE;
	size_t local_item_size = LSIZE / 20;
	ret = clEnqueueNDRangeKernel(command_queue,kernel,1,NULL,&global_item_size,&local_item_size,0,NULL,NULL);
	
	//readObjectBuffer();
	//Read memory in buffer C

	//Display result
	//for (size_t i = 0; i < LSIZE; i++)
	//{
	//	cout << result_list[i].x << " " << object_list[i].x << " " << endl;
	//}

}
void printResults(){
	//Display result
	for (size_t i = 0; i < LSIZE; i++)
	{
		cout << result_list[i].x << " " << object_list[i].x << " " << endl;
	}
}
int nmain(){

	srand(time(NULL));

	object_list = new Object[LSIZE];
	result_list = new Object[LSIZE];
	for (size_t i = 0; i < LSIZE; i++)
	{
		object_list[i].x = (float)getRandom();
		object_list[i].y = (float)getRandom();
		object_list[i].mass = 10000 * GRAVITY_CONSTANT;

		result_list[i] = object_list[i];
		//cout << object_list[i].x << endl;
	}

	initCL();
	writeObjectBuffer();
	step();
	step();
	readObjectBuffer();
	printResults();
	delete [] object_list;
	delete [] result_list;
	return 0;
}
